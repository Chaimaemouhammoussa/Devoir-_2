#include <iostream>
#include <cstdlib>

class Fichier {
private:
    char* P; // Pointeur vers l'espace mémoire
    int longueur; // Longueur en nombre d'octets

public:
    Fichier(int taille) {
        longueur = taille;
        P = new char[taille]; // Alloue l'espace mémoire
    }

    ~Fichier() {
        delete[] P; // Libère l'espace mémoire dans le destructeur
    }

    void Creation() {
        // La création est déjà gérée dans le constructeur
        std::cout << "Espace mémoire alloué." << std::endl;
    }

    void Remplit() {
        for (int i = 0; i < longueur; i++) {
            P[i] = rand() % 256; // Remplit de manière arbitraire (valeurs aléatoires)
        }
        std::cout << "Espace mémoire rempli arbitrairement." << std::endl;
    }

    void Affiche() {
        std::cout << "Contenu de l'espace mémoire : ";
        for (int i = 0; i < longueur; i++) {
            std::cout << static_cast<int>(P[i]) << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    int tailleFichier = 10; // Taille du fichier en octets

    Fichier* fichier = new Fichier(tailleFichier); // Instancie la classe par new

    fichier->Creation();
    fichier->Remplit();
    fichier->Affiche();

    delete fichier; // Supprime l'objet avec delete

    return 0;
}
