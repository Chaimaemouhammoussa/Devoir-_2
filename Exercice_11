#include <iostream>
#include <cmath>

class Vecteur3D {
private:
    float x, y, z;

public:
    Vecteur3D(float x = 0.0, float y = 0.0, float z = 0.0) : x(x), y(y), z(z) {}

    void afficher() const {
        std::cout << "(" << x << ", " << y << ", " << z << ")" << std::endl;
    }

    Vecteur3D addition(const Vecteur3D& autre) const {
        return Vecteur3D(x + autre.x, y + autre.y, z + autre.z);
    }

    float produitScalaire(const Vecteur3D& autre) const {
        return x * autre.x + y * autre.y + z * autre.z;
    }

    bool coincide(const Vecteur3D& autre) const {
        return (x == autre.x) && (y == autre.y) && (z == autre.z);
    }

    float norme() const {
        return std::sqrt(x * x + y * y + z * z);
    }

    static Vecteur3D normax(const Vecteur3D& v1, const Vecteur3D& v2) {
        return v1.norme() >= v2.norme() ? v1 : v2;
    }
};

int main() {
    Vecteur3D v1(1.0, 2.0, 3.0);
    Vecteur3D v2(4.0, 5.0, 6.0);

    std::cout << "Vecteur v1 : ";
    v1.afficher();

    std::cout << "Vecteur v2 : ";
    v2.afficher();

    Vecteur3D somme = v1.addition(v2);
    std::cout << "Somme de v1 et v2 : ";
    somme.afficher();

    float produit = v1.produitScalaire(v2);
    std::cout << "Produit scalaire de v1 et v2 : " << produit << std::endl;

    bool coincide = v1.coincide(v2);
    std::cout << "Les vecteurs v1 et v2 ont les mÃªmes composantes : " << (coincide ? "Oui" : "Non") << std::endl;

    float norme_v1 = v1.norme();
    std::cout << "Norme de v1 : " << norme_v1 << std::endl;

    Vecteur3D vecteurMax = Vecteur3D::normax(v1, v2);
    std::cout << "Le vecteur avec la plus grande norme est : ";
    vecteurMax.afficher();

    return 0;
}
